{"ast":null,"code":"import Animated, { useAnimatedStyle, useDerivedValue } from 'react-native-reanimated';\nimport { N, SQUARE_SIZE } from \"../../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Square = function Square(_ref) {\n  var index = _ref.index,\n      progress = _ref.progress;\n  var offsetAngle = 2 * Math.PI / N;\n  var finalAngle = offsetAngle * (N - 1 - index);\n  var rotate = useDerivedValue(function () {\n    var _f = function _f() {\n      return Math.min(finalAngle, progress.value);\n    };\n\n    _f._closure = {\n      finalAngle: finalAngle,\n      progress: progress\n    };\n    _f.asString = \"function _f(){const{finalAngle,progress}=jsThis._closure;{return Math.min(finalAngle,progress.value);}}\";\n    _f.__workletHash = 8534623797830;\n    _f.__location = \"/workspace/rn-loaders/src/Loaders/components/Square.tsx (17:33)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var translateY = useDerivedValue(function () {\n    var _f = function _f() {\n      if (rotate.value === finalAngle) return -N * SQUARE_SIZE;\n      return -index * SQUARE_SIZE;\n    };\n\n    _f._closure = {\n      rotate: rotate,\n      finalAngle: finalAngle,\n      N: N,\n      SQUARE_SIZE: SQUARE_SIZE,\n      index: index\n    };\n    _f.asString = \"function _f(){const{rotate,finalAngle,N,SQUARE_SIZE,index}=jsThis._closure;{if(rotate.value===finalAngle)return-N*SQUARE_SIZE;return-index*SQUARE_SIZE;}}\";\n    _f.__workletHash = 2148448109898;\n    _f.__location = \"/workspace/rn-loaders/src/Loaders/components/Square.tsx (20:37)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  var rStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        transform: [{\n          rotate: rotate.value + \"rad\"\n        }, {\n          translateY: translateY.value\n        }]\n      };\n    };\n\n    _f._closure = {\n      rotate: rotate,\n      translateY: translateY\n    };\n    _f.asString = \"function _f(){const{rotate,translateY}=jsThis._closure;{return{transform:[{rotate:rotate.value+\\\"rad\\\"},{translateY:translateY.value}]};}}\";\n    _f.__workletHash = 13337669695450;\n    _f.__location = \"/workspace/rn-loaders/src/Loaders/components/Square.tsx (25:34)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return _jsx(Animated.View, {\n    style: [{\n      backgroundColor: 'white',\n      height: SQUARE_SIZE,\n      aspectRatio: 1,\n      opacity: (index + 1) / N,\n      position: 'absolute'\n    }, rStyle]\n  });\n};\n\nexport default Square;","map":{"version":3,"sources":["/workspace/rn-loaders/src/Loaders/components/Square.tsx"],"names":["Animated","useAnimatedStyle","useDerivedValue","N","SQUARE_SIZE","Square","index","progress","offsetAngle","Math","PI","finalAngle","rotate","min","value","translateY","rStyle","transform","backgroundColor","height","aspectRatio","opacity","position"],"mappings":"AACA,OAAOA,QAAP,IACEC,gBADF,EAEEC,eAFF,QAGO,yBAHP;AAIA,SAASC,CAAT,EAAYC,WAAZ;;;AAOA,IAAMC,MAAiB,GAAG,SAApBA,MAAoB,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACjD,MAAMC,WAAW,GAAI,IAAIC,IAAI,CAACC,EAAV,GAAgBP,CAApC;AACA,MAAMQ,UAAU,GAAGH,WAAW,IAAIL,CAAC,GAAG,CAAJ,GAAQG,KAAZ,CAA9B;AAEA,MAAMM,MAAM,GAAGV,eAAe;AAAA,aAAC;AAAA,aAC7BO,IAAI,CAACI,GAAL,CAASF,UAAT,EAAqBJ,QAAQ,CAACO,KAA9B,CAD6B;AAAA,KAAD;;AAAA;AAAA,kBAfhBH,UAegB;AAAA,gBAfJJ;AAeI;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAA9B;AAGA,MAAMQ,UAAU,GAAGb,eAAe;AAAA,2BAAO;AACvC,UAAIU,MAAM,CAACE,KAAP,KAAiBH,UAArB,EAAiC,OAAO,CAACR,CAAD,GAAKC,WAAZ;AACjC,aAAO,CAACE,KAAD,GAASF,WAAhB;AACD,KAHiC;;AAAA;AAAA,cAjB9BQ,MAiB8B;AAAA,kBAjBbD,UAiBa;AAAA,SAjBOR,CAiBP;AAAA,mBAhBlBC,WAgBkB;AAAA,aAhB1BE;AAgB0B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAAlC;AAKA,MAAMU,MAAM,GAAGf,gBAAgB;AAAA,2BAAO;AACpC,aAAO;AACLgB,QAAAA,SAAS,EAAE,CACT;AAAEL,UAAAA,MAAM,EAAKA,MAAM,CAACE,KAAZ;AAAR,SADS,EAET;AACEC,UAAAA,UAAU,EAAEA,UAAU,CAACD;AADzB,SAFS;AADN,OAAP;AAQD,KAT8B;;AAAA;AAAA,cApBhBF,MAoBgB;AAAA,kBAlBfG;AAkBe;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAA/B;AAUA,SACE,KAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL;AACEG,MAAAA,eAAe,EAAE,OADnB;AAEEC,MAAAA,MAAM,EAAEf,WAFV;AAGEgB,MAAAA,WAAW,EAAE,CAHf;AAIEC,MAAAA,OAAO,EAAE,CAACf,KAAK,GAAG,CAAT,IAAcH,CAJzB;AAKEmB,MAAAA,QAAQ,EAAE;AALZ,KADK,EAQLN,MARK;AADT,IADF;AAcD,CApCD;;AAsCA,eAAeX,MAAf","sourcesContent":["import { FC } from 'react';\nimport Animated, {\n  useAnimatedStyle,\n  useDerivedValue,\n} from 'react-native-reanimated';\nimport { N, SQUARE_SIZE } from '../../constants';\n\ntype Props = {\n  index: number;\n  progress: Animated.SharedValue<number>;\n};\n\nconst Square: FC<Props> = ({ index, progress }) => {\n  const offsetAngle = (2 * Math.PI) / N;\n  const finalAngle = offsetAngle * (N - 1 - index);\n\n  const rotate = useDerivedValue(() =>\n    Math.min(finalAngle, progress.value),\n  );\n  const translateY = useDerivedValue(() => {\n    if (rotate.value === finalAngle) return -N * SQUARE_SIZE;\n    return -index * SQUARE_SIZE;\n  });\n\n  const rStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        { rotate: `${rotate.value}rad` },\n        {\n          translateY: translateY.value,\n        },\n      ],\n    };\n  });\n  return (\n    <Animated.View\n      style={[\n        {\n          backgroundColor: 'white',\n          height: SQUARE_SIZE,\n          aspectRatio: 1,\n          opacity: (index + 1) / N,\n          position: 'absolute',\n        },\n        rStyle,\n      ]}\n    />\n  );\n};\n\nexport default Square;\n"]},"metadata":{},"sourceType":"module"}