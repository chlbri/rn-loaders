{"ast":null,"code":"import { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { useSharedValue, withTiming } from 'react-native-reanimated';\nimport Square from \"./components/Square\";\nimport { N } from \"../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ClockLoader = function ClockLoader() {\n  var progress = useSharedValue(0);\n  useEffect(function () {\n    progress.value = withTiming(2 * Math.PI, {\n      duration: 1000\n    });\n  });\n  return _jsx(View, {\n    children: Array.from({\n      length: N\n    }).map(function (_, index) {\n      var key = index + 1;\n      return _jsx(Square, {\n        key: key,\n        index: index,\n        progress: progress\n      });\n    })\n  });\n};\n\nexport default ClockLoader;","map":{"version":3,"sources":["/workspace/rn-loaders/src/Loaders/Clock.tsx"],"names":["useEffect","useSharedValue","withTiming","Square","N","ClockLoader","progress","value","Math","PI","duration","Array","from","length","map","_","index","key"],"mappings":"AAAA,SAAaA,SAAb,QAA8B,OAA9B;;AAEA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,yBAA3C;AACA,OAAOC,MAAP;AACA,SAASC,CAAT;;;AAEA,IAAMC,WAAe,GAAG,SAAlBA,WAAkB,GAAM;AAC5B,MAAMC,QAAQ,GAAGL,cAAc,CAAC,CAAD,CAA/B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,QAAQ,CAACC,KAAT,GAAiBL,UAAU,CAAC,IAAIM,IAAI,CAACC,EAAV,EAAc;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAd,CAA3B;AACD,GAFQ,CAAT;AAGA,SACE,KAAC,IAAD;AAAA,cACGC,KAAK,CAACC,IAAN,CAAW;AAAEC,MAAAA,MAAM,EAAET;AAAV,KAAX,EAA0BU,GAA1B,CAA8B,UAACC,CAAD,EAAIC,KAAJ,EAAc;AAC3C,UAAMC,GAAG,GAAGD,KAAK,GAAG,CAApB;AAEA,aAAO,KAAC,MAAD;AAAcC,QAAAA,GAAG,EAAHA,GAAd;AAAmBD,QAAAA,KAAK,EAALA,KAAnB;AAA0BV,QAAAA,QAAQ,EAARA;AAA1B,QAAP;AACD,KAJA;AADH,IADF;AASD,CAfD;;AAiBA,eAAeD,WAAf","sourcesContent":["import { FC, useEffect } from 'react';\nimport { View } from 'react-native';\nimport { useSharedValue, withTiming } from 'react-native-reanimated';\nimport Square from './components/Square';\nimport { N } from '../constants';\n\nconst ClockLoader: FC = () => {\n  const progress = useSharedValue(0);\n\n  useEffect(() => {\n    progress.value = withTiming(2 * Math.PI, { duration: 1000 });\n  });\n  return (\n    <View>\n      {Array.from({ length: N }).map((_, index) => {\n        const key = index + 1;\n\n        return <Square {...{ key, index, progress }} />;\n      })}\n    </View>\n  );\n};\n\nexport default ClockLoader;\n"]},"metadata":{},"sourceType":"module"}