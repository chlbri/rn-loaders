{"ast":null,"code":"import Animated, { useAnimatedStyle, useDerivedValue, withSpring, withTiming } from 'react-native-reanimated';\nimport { N, SQUARE_SIZE } from \"../../constants\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar Square = function Square(_ref) {\n  var index = _ref.index,\n      progress = _ref.progress;\n  var offsetAngle = 2 * Math.PI / N;\n  var finalAngle = offsetAngle * (N - 1 - index);\n  var rotate = useDerivedValue(function () {\n    var _f = function _f() {\n      if (progress.value <= 2 * Math.PI) return Math.min(finalAngle, progress.value);\n      if (progress.value - 2 * Math.PI < finalAngle) return finalAngle;\n      return progress.value;\n    };\n\n    _f._closure = {\n      progress: progress,\n      finalAngle: finalAngle\n    };\n    _f.asString = \"function _f(){const{progress,finalAngle}=jsThis._closure;{if(progress.value<=2*Math.PI)return Math.min(finalAngle,progress.value);if(progress.value-2*Math.PI<finalAngle)return finalAngle;return progress.value;}}\";\n    _f.__workletHash = 8472954374958;\n    _f.__location = \"/workspace/rn-loaders/src/Loaders/components/Square.tsx (19:33)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), []);\n  var translateY = useDerivedValue(function () {\n    var _f = function _f() {\n      if (rotate.value === finalAngle) return withSpring(-N * SQUARE_SIZE);\n      if (progress.value > 2 * Math.PI) return withTiming((index - N) * SQUARE_SIZE);\n      return withTiming(-index * SQUARE_SIZE);\n    };\n\n    _f._closure = {\n      rotate: rotate,\n      finalAngle: finalAngle,\n      withSpring: withSpring,\n      N: N,\n      SQUARE_SIZE: SQUARE_SIZE,\n      progress: progress,\n      withTiming: withTiming,\n      index: index\n    };\n    _f.asString = \"function _f(){const{rotate,finalAngle,withSpring,N,SQUARE_SIZE,progress,withTiming,index}=jsThis._closure;{if(rotate.value===finalAngle)return withSpring(-N*SQUARE_SIZE);if(progress.value>2*Math.PI)return withTiming((index-N)*SQUARE_SIZE);return withTiming(-index*SQUARE_SIZE);}}\";\n    _f.__workletHash = 8701181351875;\n    _f.__location = \"/workspace/rn-loaders/src/Loaders/components/Square.tsx (26:37)\";\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }(), []);\n  var rStyle = useAnimatedStyle(function () {\n    var _f = function _f() {\n      return {\n        transform: [{\n          rotate: rotate.value + \"rad\"\n        }, {\n          translateY: translateY.value\n        }]\n      };\n    };\n\n    _f._closure = {\n      rotate: rotate,\n      translateY: translateY\n    };\n    _f.asString = \"function _f(){const{rotate,translateY}=jsThis._closure;{return{transform:[{rotate:rotate.value+\\\"rad\\\"},{translateY:translateY.value}]};}}\";\n    _f.__workletHash = 13337669695450;\n    _f.__location = \"/workspace/rn-loaders/src/Loaders/components/Square.tsx (33:34)\";\n    _f.__optimalization = 3;\n\n    global.__reanimatedWorkletInit(_f);\n\n    return _f;\n  }());\n  return _jsx(Animated.View, {\n    style: [{\n      backgroundColor: 'white',\n      height: SQUARE_SIZE,\n      aspectRatio: 1,\n      position: 'absolute'\n    }, rStyle]\n  });\n};\n\nexport default Square;","map":{"version":3,"sources":["/workspace/rn-loaders/src/Loaders/components/Square.tsx"],"names":["Animated","useAnimatedStyle","useDerivedValue","withSpring","withTiming","N","SQUARE_SIZE","Square","index","progress","offsetAngle","Math","PI","finalAngle","rotate","value","min","translateY","rStyle","transform","backgroundColor","height","aspectRatio","position"],"mappings":"AACA,OAAOA,QAAP,IACEC,gBADF,EAEEC,eAFF,EAGEC,UAHF,EAIEC,UAJF,QAKO,yBALP;AAMA,SAASC,CAAT,EAAYC,WAAZ;;;AAOA,IAAMC,MAAiB,GAAG,SAApBA,MAAoB,OAAyB;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AACjD,MAAMC,WAAW,GAAI,IAAIC,IAAI,CAACC,EAAV,GAAgBP,CAApC;AACA,MAAMQ,UAAU,GAAGH,WAAW,IAAIL,CAAC,GAAG,CAAJ,GAAQG,KAAZ,CAA9B;AAEA,MAAMM,MAAM,GAAGZ,eAAe;AAAA,2BAAO;AACnC,UAAIO,QAAQ,CAACM,KAAT,IAAkB,IAAIJ,IAAI,CAACC,EAA/B,EACE,OAAOD,IAAI,CAACK,GAAL,CAASH,UAAT,EAAqBJ,QAAQ,CAACM,KAA9B,CAAP;AACF,UAAIN,QAAQ,CAACM,KAAT,GAAiB,IAAIJ,IAAI,CAACC,EAA1B,GAA+BC,UAAnC,EAA+C,OAAOA,UAAP;AAC/C,aAAOJ,QAAQ,CAACM,KAAhB;AACD,KAL6B;;AAAA;AAAA,gBAdvBN,QAcuB;AAAA,kBAfwBI;AAexB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,OAK3B,EAL2B,CAA9B;AAOA,MAAMI,UAAU,GAAGf,eAAe;AAAA,2BAAO;AACvC,UAAIY,MAAM,CAACC,KAAP,KAAiBF,UAArB,EAAiC,OAAOV,UAAU,CAAC,CAACE,CAAD,GAAKC,WAAN,CAAjB;AACjC,UAAIG,QAAQ,CAACM,KAAT,GAAiB,IAAIJ,IAAI,CAACC,EAA9B,EACE,OAAOR,UAAU,CAAC,CAACI,KAAK,GAAGH,CAAT,IAAcC,WAAf,CAAjB;AACF,aAAOF,UAAU,CAAC,CAACI,KAAD,GAASF,WAAV,CAAjB;AACD,KALiC;;AAAA;AAAA,cAvB9BQ,MAuB8B;AAAA,kBAvBbD,UAuBa;AAAA,kBAvBMV,UAuBN;AAAA,SAtB2BE,CAsB3B;AAAA,mBArBPC,WAqBO;AAAA,gBAtB9BG,QAsB8B;AAAA,kBArB3BL,UAqB2B;AAAA,aArBfI;AAqBe;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,OAK/B,EAL+B,CAAlC;AAOA,MAAMU,MAAM,GAAGjB,gBAAgB;AAAA,2BAAO;AACpC,aAAO;AACLkB,QAAAA,SAAS,EAAE,CACT;AAAEL,UAAAA,MAAM,EAAKA,MAAM,CAACC,KAAZ;AAAR,SADS,EAET;AACEE,UAAAA,UAAU,EAAEA,UAAU,CAACF;AADzB,SAFS;AADN,OAAP;AAQD,KAT8B;;AAAA;AAAA,cA5BhBD,MA4BgB;AAAA,kBA1BfG;AA0Be;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,MAA/B;AAWA,SACE,KAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL;AACEG,MAAAA,eAAe,EAAE,OADnB;AAEEC,MAAAA,MAAM,EAAEf,WAFV;AAGEgB,MAAAA,WAAW,EAAE,CAHf;AAKEC,MAAAA,QAAQ,EAAE;AALZ,KADK,EAQLL,MARK;AADT,IADF;AAcD,CA3CD;;AA6CA,eAAeX,MAAf","sourcesContent":["import { FC } from 'react';\nimport Animated, {\n  useAnimatedStyle,\n  useDerivedValue,\n  withSpring,\n  withTiming,\n} from 'react-native-reanimated';\nimport { N, SQUARE_SIZE } from '../../constants';\n\ntype Props = {\n  index: number;\n  progress: Animated.SharedValue<number>;\n};\n\nconst Square: FC<Props> = ({ index, progress }) => {\n  const offsetAngle = (2 * Math.PI) / N;\n  const finalAngle = offsetAngle * (N - 1 - index);\n\n  const rotate = useDerivedValue(() => {\n    if (progress.value <= 2 * Math.PI)\n      return Math.min(finalAngle, progress.value);\n    if (progress.value - 2 * Math.PI < finalAngle) return finalAngle;\n    return progress.value;\n  }, []);\n\n  const translateY = useDerivedValue(() => {\n    if (rotate.value === finalAngle) return withSpring(-N * SQUARE_SIZE);\n    if (progress.value > 2 * Math.PI)\n      return withTiming((index - N) * SQUARE_SIZE);\n    return withTiming(-index * SQUARE_SIZE);\n  }, []);\n\n  const rStyle = useAnimatedStyle(() => {\n    return {\n      transform: [\n        { rotate: `${rotate.value}rad` },\n        {\n          translateY: translateY.value,\n        },\n      ],\n    };\n  });\n\n  return (\n    <Animated.View\n      style={[\n        {\n          backgroundColor: 'white',\n          height: SQUARE_SIZE,\n          aspectRatio: 1,\n          // opacity: (index + 1) / N,\n          position: 'absolute',\n        },\n        rStyle,\n      ]}\n    />\n  );\n};\n\nexport default Square;\n"]},"metadata":{},"sourceType":"module"}